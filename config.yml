title: Introduction to React
tagline: Take your first steps in modern frontend development
description: In this course, you will learn the basics of React.js through building a gradebook web application to manage assignments, students, and grades.
template:
  name: intro-react
  repo: react-template
  description: 'A robot powered training repository :robot:'
before:
  - type: createIssue
    title: Welcome to React
    body: 00-setup.md

steps:
  - title: Setup and Components
    description: Welcome to React! Let's get started with our project.
    event: pull_request.opened
    link: '{{ repoUrl }}/issues/1'
    actions:
      - type: gate
        left: '%payload.pull_request.title%'
        right: Changes
        operator: ===
        else:
          - type: respond
            with: Make sure the title of your PR is "Changes"
            issue: Welcome to React
      - type: respond
        with: 01-congrats.md
        issue: Changes
      - type: respond
        with: 01-components.md
        issue: Changes
      - type: createPullRequestComment
        body: header-component-activity.md
        file: src/App.jsx
        position: 85
  - title: Props
    actions:
      - type: gate
        left: '%payload.ref%'
        operator: ===
        right: refs/heads/changes
      - type: getPullRequest
        pullRequest: Changes
        action_id: metaPR2
      - type: respond
        with: 02-props.md
        issue: Changes
      - type: createPullRequestComment
        body: import-child-component-activity.md
        file: src/App.jsx
        position: 3
      - type: createPullRequestComment
        body: uncomment-assignments-activity.md
        file: src/App.jsx
        position: 46
      - type: createPullRequestComment
        body: replace-title-activity.md
        file: src/List.jsx
        position: 5
    description: Learn how to pass data to child components
    event: push
    link: '{{ repoUrl }}/issues/2'
  - title: State
    actions:
      - type: gate
        left: '%payload.ref%'
        operator: ===
        right: refs/heads/changes
      - type: getPullRequest
        pullRequest: Changes
        action_id: metaPR2
      - type: getFileContents
        action_id: fileContents
        filename: 'src/App.jsx'
      - type: gate
        left: '/^\s*if\s*\(\s*this.state.buttonClicked\s*===\s*"assignments"\)\s*{\s*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*}\s*\n/gm'     
        operator: test
        right: '%actions.fileContents%'
        else:
          - type: respond
            with: bad-uncomment.md
            issue: Changes
      - type: respond
        with: 03-state.md
        issue: Changes
      - type: createPullRequestComment
        body: add-state-variable-activity.md
        file: src/App.jsx
        position: 12
        pullRequest: '%actions.metaPR2.data.number%'
      - type: createPullRequestComment
        body: explainin-this-state-activity.md
        file: src/App.jsx
        position: 32
        pullRequest: '%actions.metaPR2.data.number%'
      - type: createPullRequestComment
        body: create-addstudent-activity.md
        file: src/App.jsx
        position: 38
        pullRequest: '%actions.metaPR2.data.number%'
      - type: createPullRequestComment
        body: bind-function-activity.md
        file: src/App.jsx
        position: 20
        pullRequest: '%actions.metaPR2.data.number%'
    description: Learn how to deal with dynamic data
    event: push
    link: '{{ repoUrl }}/issues/2'
  - title: Callback Functions
    actions:
      - type: gate
        left: '%payload.ref%'
        operator: ===
        right: refs/heads/changes
      - type: getPullRequest
        pullRequest: Changes
        action_id: metaPR2
      - type: getFileContents
        action_id: fileContents
        filename: 'src/App.jsx'
      - type: gate
        left: '/^\s*this\.addStudent\s*=\s*this\.addStudent\.bind\s*\(\s*this\s*\)\s*;\s*\n/gm'
        operator: test
        right: '%actions.fileContents%'
        else:
          - type: respond
            with: bad-uncomment.md
            issue: Changes
      - type: getPullRequest
        pullRequest: Changes
        action_id: metaPR2
      - type: gate
        left: '/^\s*addStudent\s*\(\s*studentName\s*\)\s*/gm'     
        operator: test
        right: '%actions.fileContents%'
        else:
          - type: respond
            with: bad-function.md
            issue: Changes
      - type: respond
        with: 04-callbackfunctions.md
        issue: Changes
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |
              
              ### Passing Functions as Props

              So where exactly are those functions we created to set state getting called?

              So it looks like we pass the `addAssignment` function as a prop in this chunk of code.
        position: 52
      - type: respond
        with: callback-example.md
        issue: Changes
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |
            ### Change the props for Students

            Take a look at this conditional in `App.jsx`. 

            We are trying to render the correct component when we click `Students`. Go ahead and uncomment the entire conditional statement.

            Hmmm, there's some stuff wrong about this code. We want to be modifying the `students` list, not the `assignments` list. 

            Let's go ahead and change some props!

            - Change the `placeholder` prop to `"Add Student..."`
            - Change the `currList` prop to `{this.state.students}`
            - Change the `addFunction` prop to `{this.addStudent}`
        position: 68
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |
            ### Uncomment the Grades Section 

            LAST THING! Let's get our grades working!

            Uncomment this last conditional statement for the grades tab!
            
            ### Run your code
            To run your code, move inside your repo folder in your terminal and run `npm start`

            ### What your code should look like

            Your code should now be able to add assignments, students, and grades! You are done!

            ### Push your code
            To push your code to Github, run the following lines inside the repo folder in your terminal.

            ```
            git add src/App.jsx
            git commit -m "used callback functions to complete project"
            git push origin changes
            ```

            ### Merge your code
            After you push, merge this PR and delete the branch! Congratulations! 
        position: 78


    description: Learn how to pass data back to parent components
    event: push
    link: '{{ repoUrl }}/issues/2'
  - title: Congratulations and Closing Thoughts
    event: pull_request.closed
    description: Congrats on finishing the course!
    actions:
      - type: respond
        with: 05-congrats.md
        issue: Changes
    
