title: Introduction to React
tagline: Take your first steps in modern frontend development
description: Learn React
template:
  name: intro-react
  repo: react-template
  description: 'A robot powered training repository :robot:'
before:
  - type: createIssue
    title: Welcome to React
    body: 00-setup.md
    comments:
      - test.md

steps:
  - title: Setup and Components
    description: Welcome to React! Let's get started with our project.
    event: push
    actions:
      - type: gate
        left: '%payload.ref%'
        right: refs/heads/changes
        operator: ===
      - type: createPullRequest
        title: Title
        body: 01-components.md
        head: changes
        action_id: metaPR
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR.data.head.repo.owner.login%'
        repo: '%actions.metaPR.data.head.repo.name%'
        number: '%actions.metaPR.data.number%'
        commit_id: '%actions.metaPR.data.head.sha%'
        path: src/App.jsx
        body: |
            ### Add some code
            Let's add a couple of child components and give our app a header.

            Replace the line where it says to replace with this header component:

            ```jsx
            <h3 className="Box-title d-flex flex-justify-center">GradeBook</h3>
            ```

            ### Run your code
            To run your code, inside your repo folder in your termainal run `npm start`.

            ### What your code should look like

            `[ADD SCREEN VID]`

            ### Push your code
            Let's push your code to GitHub

            Run the following lines inside your repo folder in your terminal.

            ```
            git add src/App.jsx
            git commit -m "added a header and footer"
            git push origin changes
            ```
        position: 88
  - title: Props
    actions:
      - type: gate
        left: '%payload.ref%'
        operator: ===
        right: refs/heads/changes
      - type: getPullRequest
        pullRequest: Title
        action_id: metaPR2
      - type: respond
        with: 02-props.md
        issue: Title
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |
            ### Add some code

            Navigate to `List.jsx`. You'll see that we made our own component, `List`. 

            Let's go ahead and import that component.

            At the top of `App.jsx`, replace the line with

            ```js
            import List from "./List";
            ```

            Scroll down for the next step.
        position: 3
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |
              ## Add some more code 

              Go ahead and uncomment the conditional statement underneath where it says to
              
              `Uncomment below for step 2`


              ### Run your code

              To run your code, move inside your repo folder in your terminal and run `npm start`

              ### What your code should look like

              `[ADD SCREEN VID]`

              ### Code Explanation

              Let's take a look at what this code means. Basically, what it is saying is that when we click the `Assignments` button, the list for assignments will be assigned to the variable `tabChoice`. In our `render` method, we see that `tabChoice` is rendered.

              But how do we specialize the `List` for our assignments? This where our props come into play. We create properties such as `placeholder`, and `currList`. We then assign values to them.

              [IMAGES]

              Scroll below for more code to add!
        position: 46
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/List.jsx
        body: |
              ### Add some more code

              But what does the `List` component do with this information? Let's take a look. 

              Go to `List.jsx`. In the `render` method, in our input tag, you see that we set our `placeholder` to `this.props.placeholder`, and then at the bottom of our `render` method, we loop through out `this.props.currList`, to show each item in the list that we pass. Adding `this.props` tells the component to look for that property that was passed to it.

              Let's go ahead and replace that ugly title with a prop. In our `render` method in `List.jsx`, where it says to replace the title with a prop, replace that with `{this.props.title}`.

              ### Run your code

              To run your code, move inside your repo folder in your terminal and run `npm start`

              ### Push your code
              Awesome! We are using props! You already learned so much! 

              To push your code to Github, run the following lines inside the repo folder in your terminal.

              ```
              git add -u
              git commit -m "using props for List component"
              git push origin changes
              ```
        position: 5
    description: Learn how to pass data to child components
    event: push
  - title: State
    actions:
      - type: gate
        left: '%payload.ref%'
        operator: ===
        right: refs/heads/changes
      - type: getPullRequest
        pullRequest: Title
        action_id: metaPR2
      - type: respond
        with: 03-state.md
        issue: Title
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |
            ### Add some code

            In React, we store dynamic data in **state variables**. Let's take a look at how we store state variables. In `App.jsx`, take a look at the constructor. You'll see that we declare our state variables using `this.state = {.....}`.


            Currently, in `App`, we have three state variables:
            - `buttonClicked` - This stores which button was clicked. It is a state variable because the button that is clicked has the ability to change.
            - `assignmentsList` - This stores the list of assignments. It is a state variable because the list changes every time a new assignment is added.
            - `grades` - This should store the grade for each student. However, we have no way to store students, so let's fix that!

            Add a state variable to `App` and name it `studentsList`. Set it equal to an empty list. Make sure to add the comma! 
        position: 12
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |

            ### Explaining `this.setState`

            Ok, so now we added a state variable, how do we actually change the data?

            Unfortunatley, we can't just do `this.state.studentsList = .....` to change data. I wish it was that simple!

            To set the state of a state variable we have to use the method, `this.setState`.

            Take a look at the above code in `App.jsx`

            When this method is called, it setting the state variable `buttonClicked` to the argument, `buttonName` using `this.setState`.

            In our `render` method we see that `handleButtonClicked` is called when each button is clicked with it's respective arguments. For instance, when the `Assignments` button is clicked, we call `handleButtonClicked("assignments")`.

            We are going to set some state in next steps.
        position: 25
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |

            ### Create your own function

            Now that we see how it works with assignments, let's try it with students! 

            create a method called `addStudent` below the comment

            `addStudent` should take `studentName` as a parameter and then concat that `studentName` to the end of `students` list that we created earlier. 
        position: 32
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/App.jsx
        body: |

            ### Bind the function

            Also, since we created a method that changes the a state variable, we have to bind it to our class, so that when we call it, we know what method to reference.

            Go ahead and uncomment this line.


            ### Push your code

            ```
            git add -u
            git commit -m "using students state variable and setting state"
            git push origin changes

            ```
        position: 18
    description: Learn how to deal with dynamic data
    event: push
  - title: Callback Functions
    actions:
      - type: gate
        left: '%payload.ref%'
        operator: ===
        right: refs/heads/changes
      - type: getPullRequest
        pullRequest: Title
        action_id: metaPR2
      - type: respond
        with: 04-callbackfunctions.md
        issue: Title
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/List.jsx
        body: |
              
              ### Add some code
              Now that we see how it works with assignments, let's try it with students! 

              Below this line of code in `App.jsx`
              ```
              /*Write an addStudent function here for step 4*/
              ```

              create a method called `addStudent`

              `addStudent` should take `studentName` as a parameter and then concat that `studentName` to the end of `students` list that we created earlier. 

              Also, since we created a method that changes the a state variable, we have to bind it to our class, so that when we call it, we know what method to reference.

              Go ahead and uncomment the following line.

              ```
              /*this.addStudent = this.addStudent.bind(this);*/
              ```

              Awesome, now let's actually add some functionality to our students button.

              Go ahead and uncomment this code.

              ### Run your code
              Add line here
        position: 5
      - type: octokit
        method: pullRequests.createComment
        owner: '%actions.metaPR2.data.head.repo.owner.login%'
        repo: '%actions.metaPR2.data.head.repo.name%'
        number: '%actions.metaPR2.data.number%'
        commit_id: '%actions.metaPR2.data.head.sha%'
        path: src/List.jsx
        body: |
              push origin changes
        position: 5


    description: Learn how to pass data back to parent components
    event: push
